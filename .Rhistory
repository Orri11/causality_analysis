line(log_model , lwd = 2)
abline(log_model , lwd = 2)
?lines
index <- order(SpaceShuttle$Temperature)
lines(SpaceShuttle$Temperature[index] , log_model$fitted.values[index] , type = 'b' lwd = 2)
plot(Fail ~ Temperature , data = SpaceShuttle, lwd =2 , ylim=range(log_model$fitted.values) + c(-0.2,0.2) ,
col = 'black')
index <- order(SpaceShuttle$Temperature)
lines(SpaceShuttle$Temperature[index] , log_model$fitted.values[index] , type = 'b', lwd = 2)
lines(SpaceShuttle$Temperature[index] , prob_model$fitted.values[index] , type = 'b', col = 'green',lwd = 2)
log_model2 <- glm(SpaceShuttle$Fail ~ SpaceShuttle$Temperature + SpaceShuttle$TemperatureC , family = binomial (link = 'logit'))
logmodel$coefficients
log_model$coefficients
log_model2$coefficients
log_model2 <- glm(SpaceShuttle$Fail ~ SpaceShuttle$TemperatureC , family = binomial (link = 'logit'))
log_model2$coefficients
log_model$coefficients
log_chance = predict(log_model , Temperature = 31)
?predict
log_chance = predict(log_model , Temperature = 31 , type = 'response')
View(log_model)
log_chance = predict(log_model , SpaceShuttle$Temperature = 31 , type = 'response')
log_chance = predict(log_model ,type = 'response', newdata = data.frame(Temperature = 31)
log_chance = predict(log_model ,type = 'response', newdata = data.frame(Temperature = 31))
log_chance = predict(log_model ,type = 'response', newdata = data.frame(SpaceShuttle$Temperature = 31))
new.data = data.frame(Temperature = 31)
View(new.data)
log_chance = predict(log_model ,type = 'response', newdata)
log_chance = predict(log_model ,type = 'response', new.data)
log_model <- glm(Fail ~ Temperature , data = SpaceShuttlefamily = binomial (link = 'logit'))
log_model <- glm(Fail ~ Temperature , data = SpaceShuttle, family = binomial (link = 'logit'))
log_chance = predict(log_model ,type = 'response', new.data)
log_chance
prob_model <- glm(SpaceShuttle$Fail ~ Temperature , data = SpaceShuttle family = binomial (link = 'probit'))
prob_model <- glm(SpaceShuttle$Fail ~ Temperature , data = SpaceShuttle , family = binomial (link = 'probit'))
prob_chance = predict(prob_model ,type = 'response', new.data)
lmodel <- lm(Fail ~ Temperature , data = SpaceShuttle)
lin_chance = predict(lm_model ,type = 'response', new.data)
lin_chance = predict(l_model ,type = 'response', new.data)
lin_chance = predict(lmodel ,type = 'response', new.data)
print (log_chance , prob_chance ,  lin_chance)
print (c(log_chance , prob_chance ,  lin_chance))
install.packages("vcd")
library(vcd)
data("SpaceShuttle")
force(SpaceShuttle)
View(SpaceShuttle)
source("~/.active-rstudio-document", echo=TRUE)
Y <- matrix(c(9,1,7,3,6,4,4,6) , ncol = 2, byrow = TRUE)
Y
rowSums(Y)
Y / rowSums(Y)[1]
Y / rowSums(Y)
model1 <- glm(Y ~ S*Educ , family = binomial(link = 'logit')
model1 <- glm(Y ~ S*Educ , family = binomial(link = 'logit'))
model1 <- glm(Y ~ S*Educ, family = binomial(link = 'logit'))
model1
help(qchisq)
?mmstat4
??mmstat4
ghopen("solution/normality_allbus.R")
library(mmstat4)
ghopen("solution/normality_allbus.R")
allbus <- ghload("data/allbus2012.rds")
quantiles <- c(0.02,0.09,0.25,0.50,0.75,0.98)
quantiles <- c(0.02,0.09,0.25,0.50,0.75,0.91,0.98)
?quantile
height_quan <- quantil(allbus$height,quantiles)
height_quan <- quantile(allbus$height,quantiles)
height_quan <- quantile(allbus$height,quantiles, na.rm = TRUE)
weight_quan <- quantile(allbus$weight,quantiles, na.rm = TRUE)
height_quan <- matrix(cbind(quantiles , weight_quan))
View(height_quan)
height_quan <- matrix(rbind(quantiles , weight_quan))
View(height_quan)
height_quan <- matrix(rbind(quantiles , weight_quan), nrow = 2)
View(height_quan)
?matrix
height_quan <- matrix(rbind(quantiles , weight_quan), nrow = 2 , rownames = c(rep("quantile" , 7)))
rownames(height_quan, c(rep("quantile" , 7)))
colnames(height_quan, c(rep("quantile" , 7)))
a = c(rep("Quantile , 7"))
a = rep("Quantile" , 7)
colnames(height_quan, rep("Quantile" , 7)
colnames(height_quan, a)
colnames(height_quan) <- rep("Quantile" , 7)
remove(a)
height_quan <- matrix(rbind(quantiles , height_quan), nrow = 2)
colnames(height_quan) <- rep("Quantile" , 7)
weight_quan <- matrix(rbind(quantiles , weight_quan), nrow = 2)
colnames(height_quan) <- rep("Quantile" , 7)
colnames(weight_quan) <- rep("Quantile" , 7)
View(weight_quan)
height_quan <- quantile(allbus$height,quantiles, na.rm = TRUE)
height_quan <- matrix(rbind(quantiles , height_quan), nrow = 2)
colnames(height_quan) <- rep("Quantile" , 7)
View(height_quan)
View(weight_quan)
View(height_quan)
View(weight_quan)
?diff
hei_moms <- lapply(allbus$height , c("mean" , "variance"))
hei_moms <- lapply(allbus$height , c(mean , variance))
hei_moms <- lapply(allbus$height , c(mean , var))
?var
hei_moms <- lapply(allbus$height , c(mean , var))
multiple_funs <- function (x) {
c(mean = mean(x) , var = var(x) , Skewneww = skewness(x) , Kurtosis = kurtosis(x)
, Hyperskewness = hyperskewness(x))
}
height_moms <- lapply(allbus$height , multiple_funs)
install.packages(moments)
library(moments)
height_moms <- lapply(allbus$height , multiple_funs)
all.moments(allbus$weight, order.max=5, central=TRUE)
?all.moments
all.moments(allbus$weight, order.max=5, central=TRUE . na.rm = TRUE)
all.moments(allbus$weight, order.max=5, central=TRUE , na.rm = TRUE)
all.moments(allbus$height, order.max=5, central=TRUE , na.rm = TRUE)
hist(allbus$height)
par(mfrow = c(1,2))
hist(allbus$height)
lines(mean(allbus$height , na.rm = TRUE) , col = "red")
?dorn
?dnorm
hist(allbus$height)
par(mfrow = c(1,2))
hist(allbus$height)
curve(dnorm(allbus$height , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , col = 'red')
curve(dnorm(allbus$height , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
?curve
exam < - dnorm(allbus$height , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE))
examp < - dnorm(allbus$height , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE))
x <- rnorm(1650)
examp < - dnorm(x , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE))
dnorm(x , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE))
curve(dnorm(allbus$height , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
curve(x , mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
hist(allbus$height)
curve(dnorm(x, mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
hist(allbus$height , frequency = FALSE)
hist(allbus$height , freq = FALSE)
hist(allbus$height , freq = FALSE)
curve(dnorm(x, mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
?rnorm
par(mfrow = c(1,2))
hist(allbus$height , freq = FALSE)
curve(dnorm(x, mean = mean(allbus$height , na.rm = TRUE) ,
sd = sd(allbus$height , na.rm = TRUE)) , add = TRUE , col = 'red')
lines(density(allbus$height) , col = 'green')
lines(density(allbus$height, na.rm = TRUE) , col = 'green')
hist(allbus$weight , freq = FALSE)
curve(dnorm(x, mean = mean(allbus$weight , na.rm = TRUE) ,
sd = sd(allbus$weight , na.rm = TRUE)) , add = TRUE , col = 'red')
lines(density(allbus$weight, na.rm = TRUE) , col = 'green')
?density
qqplot(allbus$height , na.rm = TRUE)
qqPlot(allbus$height , na.rm = TRUE)
library(car)
library("car")
qqPlot(allbus$height , na.rm = TRUE)
qqPlot(allbus$height)
qqPlot(allbus$weight)
ks.test(allbus$height)
ks.test(allbus$height , "pnorm" , mean = mean(allbus$height , na.rm = TRUE))
ks.test(allbus$weight , "pnorm" , mean = mean(allbus$weight , na.rm = TRUE))
?pnorm
library("nortest")
cvm.test(allbus$height)
cvm.test(allbus$weight)
ad.test(allbus$height)
ad.test(allbus$weight)
ghget("solution/transformation_salary.R")
ghload("solution/transformation_salary.R")
ghopen("solution/transformation_salary.R")
salary <- ghload("data/salary.rds")
salbeg_trans <- (salary$salbeg - mean(salary$salbeg , na.rm = TRUE) / sd(salary$salbeg , na.rm = TRUE)
salbeg_trans <- (salary$salbeg - mean(salary$salbeg , na.rm = TRUE) / sd(salary$salbeg , na.rm = TRUE))
salbeg_trans <- (salary$salbeg - mean(salary$salbeg , na.rm = TRUE)) / sd(salary$salbeg , na.rm = TRUE)
print (min(salbeg_trans , max(salbeg_trans))
print (min(salbeg_trans) , max(salbeg_trans))
print (min(salbeg_trans))
print (min(salbeg_trans) , max(salbeg_trans))
print (c(min(salbeg_trans) , max(salbeg_trans))
print (c(min(salbeg_trans) , max(salbeg_trans)))
scale(salary$salbeg)
library(psych)
describe(salbeg_trans)
?describe
describe(salbeg_trans , salary$sex)
describe(salbeg_trans , salary$sex , na.rm = TRUE)
describe(salbeg_trans , salary$sex , mat = TRUE)
?describeBy
describeBy(salbeg_trans , salary$sex , mat = TRUE)
View(salary)
str(salary$sex)
describeBy(salbeg_trans , salary$sex , mat = TRUE)
allbus <- ghload("data/allbus2012.rds")
View(allbus)
stem(allbus$di05 , scale = 1)
str(allbus)
ghload("solution/outlier_allbus.R")
ghopen("solution/outlier_allbus.R")
stem(allbus$di05 , scale = 1)
stem(allbus$di05)
stem(allbus$weight , scale = 1)
boxplot(allbus$weight)
?scale
scaled <- scale(allbus$weight)
print(c(min(scaled , na.rm =TRUE) , max(scaled , na.rm = TRUE)))
ghopen("solution/outlier_body.R")
body <- data("body", package = "mmstat4")
data("body", package = "mmstat4")
data("body", package = "mmstat4")
ghopen("solution/outlier_pechstein.R")
pechstein <- ghload("data/pechstein.rds")
View(pechstein)
str(pechstein)
hist(pechstein$Retikulozyten)
boxplt(pechstein$Retikulozyten)
boxplot(pechstein$Retikulozyten)
out <- adjOutlyingness(pechstein$Retikulozyten, ndir=1)
library("robustbase")
out <- adjOutlyingness(pechstein$Retikulozyten, ndir=1)
boxplot(out$adjout, horizontal = TRUE)
allbus <- ghload("data/allbus2012.rds")
View(allbus)
ghget("normality_allbus.R")
library(mmstat4)
ghload(normality_allbus.R)
ghload("normality_allbus.R")
ghopen("normality_allbus.R")
allbus <- ghload("data/allbus2012.rds")
View(allbus)
ghopen("solution/robust_allbus.R")
di05 <- allbus$di05
weight <- allbus$weight
weight <- allbus$weight(na.rm = TRUE)
weight <- allbus$weight[na.rm=TRUE]
weight <- na.omit(weight)
boxplot(weight)
filter = 1.5*quantile(weight,0.75)
quantile(weight,0.75)
filter = 1.5*quantile(weight,0.75)[2]
1.5*quantile(weight,0.75)[2]
1.5*quantile(weight,0.75)
quantile(weight,0.75)
quantile(weight,0.75)[1]
quantile(weight,0.75)[2]
quantile(weight,0.75)[0]
filter = quantile(weight,0.75)
filter <- filter*1.5
filter_up <- filter_up*1.5
filter_up = quantile(weight,0.75)
filter_up <- filter_up*1.5
filter_down <- quantile(weight,0.25)
filter_down <- filter_down*1.5
filter_down <- quantile(weight,0.25)
filter_down <- filter_down*-1.5
iqr = IQR(weight)
filter_up = quantile(weight,0.75)
filter_up <- filter_up + 1.5*iqr
filter_down <- quantile(weight,0.25)
filter_down <- filter_down - 1.5*iqr
outliers = weight[which(weight > filter_up | weight < filter_down)]
weight_filtered <- weight[-outliers]
means = c(mean(weight) , mean(weight_filtered))
print(outliers)
outliers = weight[which(weight > filter_up) & which(weight < filter_down)]
outliers = weight[which(weight > filter_up | weight < filter_down)]
outliers = weight[which(weight > 120 | weight < 32)]
outliers = weight[which(weight > 120) & which(weight < 32)]
outliers = weight[which(weight > 120 | weight < 32)]
outliers = weight[which((weight > 120) | (weight < 32))]
outliers = weight[which((weight > 120) & (weight < 32))]
outliers = weight[which((weight > 120) | (weight < 32))]
weight[which(weight<32)]
source("~/.active-rstudio-document", echo=TRUE)
filter_down <- quantile(weight,0.25)
filter_down <- filter_down - 1.5*iqr
outliers = weight[which((weight > 120) | (weight < 32))]
ghopen("solution/outlier_body.R")
View(allbus)
test <- weight[-outliers]
outliers
weight[1610:1621]
weight[1622] <- 0
weight[1622] <- ""
weight <- allbus$weight
weight <- na.omit(weight)
library(EffectStars)
install.packages("Effectstars")
Y
install.packages("EffectStars")
library(EffectStars)
library(EffectStars)
data("alligator")
View(alligator)
allbus <- ghload("data/allbus2012.rds")
library(mmstat4)
allbus <- ghload("data/allbus2012.rds")
weight <- allbus$weight
weight <- na.omit(weight)
boxplot(weight)
iqr = IQR(weight)
filter_up = quantile(weight,0.75)
filter_up <- filter_up + 1.5*iqr
filter_down <- quantile(weight,0.25)
filter_down <- filter_down - 1.5*iqr
outliers = weight[which((weight > 120) | (weight < 32))]
outliers_down = weight[which(weight<32)]
weight_filtered <- weight[-outliers]
weight_filtered <- weight[-which(weight> 120]
weight_filtered <- weight[-which(weight) 120]
weight_filtered <- weight[-which(weight > 120)]
test = weight[outliers]
outliers
weight[outliers]
weight[-outliers]
weight_filtered <- weight[-which(weight = outliers)]
weight_filtered <- weight[-which(weight == outliers)]
weight_filtered <- weight[-outliers]
weight[95]
weight[132]
weight[1]
weight_filtered <- weight[!weight %in% outliers
weight_filtered <- weight[!weight %in% outliers]
weight_filtered <- weight[!weight %in% outliers]
means = c(mean(weight) , mean(weight_filtered))
medians = c(median(weight) , median(weight_filtered))
print(medians)
outliers
sds = c(sd(weight) , sd(weight_filtered))
print(sds)
weight_mean = mean(weight)
weight_replaced = replace(weight , weight == outliers , weight_mean)
weight_replaced = replace(weight , weight == 120 , weight_mean)
weight_replaced = replace(weight , weight == outliers , weight_mean)
weight_replaced[which(weight_replaced > 120)]
weight_replaced = replace(weight , weight >= 120 , weight_mean)
weight_replaced[which(weight_replaced > 120)]
print (c(mean(weight_replaced) , median(weight_replaced) , sd(weight_replaced)))
ghload("solution/robust_allbus.R")
ghopen("solution/robust_allbus.R")
c(mean(weight) , mean(weight,trim = 0.2))
c(sd(weight) , sd(weight,trim = 0.2))
MASS::huber
huber(weight)
ghload("solution/robust_correlation.R
11
")
ghload("solution/robust_correlation.R11")
ghload(solution/robust_correlation.R)
ghload("solution/robust_correlation.R")
ghopen("solution/robust_correlation.R")
?adjOutlyingness(
?adjOutlyingness
?scale
scale(c(1,2,3,4,4,5,6,7,8,9,10))
library(mmstat4)
vignette("mmstat4")
ghload("solution/outlier_allbus.R")
ghopen("solution/outlier_allbus.R")
allbus <- ghload("data/allbus2018.rds")
View(allbus)
View(allbus)
str(allbus)
is.na(allbus)[p.01]
is.na(allbus)["p.01"]
allbus["p.01"]
allbus["pt01"]
is.na(allbus)["pt01"]
is.na(allbus)["pt02"]
is.na(allbus)["pt03"]
is.na(allbus)["pt30"]
is.na(allbus$pt01)
is.nan(allbus$pt01)
sum(is.nan(allbus$pt01))
sum(is.nan(allbus[:,13:20])) / nrow(allbus) * 7
allbus[1:2,1]
allbus[3:4,4]
allbus[:,1]
sum(is.nan(allbus[1:nrow(allbus),13:20])) / nrow(allbus) * 7
allbus[:,1]
sum(is.nan(allbus[,13:20])) / nrow(allbus) * 7
mean(allbus[,13])
allbus[1,2]
allbus[1,20]
allbus[,20]
mean(allbus[,20],na.rm = TRUE)
?is.nan
sum(is.na(allbus[,13:20])) / nrow(allbus) * 7
sum(is.na(allbus[,13:20]))
nrow(allbus) * 7
sum(is.na(allbus[,13:20])) / nrow(allbus) * 7
sum(is.na(allbus[,13:20]))
sum(is.na(allbus[,13:20])) / (nrow(allbus) * 7)
ghopen("solution/missing_income1.R")
table(is.na(c(allbus$di05,allbus$di06)))
nrows(allbus)
nrow(allbus)
grp <- is.na(allbus$di05)
table(grp)
table(grp, allbus$land)
bothvec <- c()
for i in (1:nrow(allbus)) {
for (i in 1:nrow(allbus)) {
if (is.na(allbus[i,4]) & is.na(allbus[i,5])) {
bothvec.append(1)
} else {
bothvec.append(0)
}
}
for (i in 1:nrow(allbus)) {
if (is.na(allbus[i,4]) & is.na(allbus[i,5])) {
append(bothvec,1)
} else {
append(bothvec,0)
}
}
for (i in 1:nrow(allbus)) {
print (i)
}
rm(i)
for (i in 1:nrow(allbus)) {
print (i)
}
is.na(allbus[1,4])
is.na(allbus[1,4]) & is.na(allbus[1,5])
?append
for (i in 1:nrow(allbus)) {
if (is.na(allbus[i,4]) & is.na(allbus[i,5])) {
append(bothvec,1)
} else {
append(bothvec,0)
}
}
for (i in 1:nrow(allbus)) {
append(bothvec , i)
}
for (i in 1:nrow(allbus)) {
print (i)
}
for (i in 1:nrow(allbus)) {
append(bothvec , i)
}
for (i in 1:nrow(allbus)) {
bothvec[i] = i
}
bothvec <- c()
for (i in 1:nrow(allbus)) {
if (is.na(allbus[i,4]) & is.na(allbus[i,5])) {
bothvec[i] = 1
} else {
bothvec[i] = 0
}
}
sum(bothvec)
allbus$bothna <- bothvec
table(allbus$land , allbus$bothna)
prop.table(allbus$land , allbus$bothna)
?prop.table
?table
?table
plot(table(allbus$land , allbus$bothna))
library("DescTools")
CramerV(allbus$land , allbus$bothna)
ptvar <- startsWith(names(allbus), "pt")
trust <- allbus[names(allbus)[ptvar]]
View(trust)
View(trust)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("CausalArima")
devtools::install_github("FMenchetti/CausalArima")
install.packages("devtools")
devtools::install_github("FMenchetti/CausalArima")
librrary(CausalArima)
library(CausalArima)
install.packages("tidybayes")
devtools::install_github("FMenchetti/CausalArima")
library(CausalArima)
getwd()
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt')
View(file1)
source("~/Desktop/School/causality_analysis/src/data_preprocessing/elec_price/[3]mean_stl_train_validation_withoutEXvar.R", echo=TRUE)
setwd('/Desktop/School/causality_analysis/')
setwd('Users/orshahar/Desktop/School/causality_analysis/')
setwd('users/orshahar/Desktop/School/causality_analysis/')
setwd(""/Users/orshahar/desktop/School/causality_analysis/)
setwd("/Users/orshahar/desktop/School/causality_analysis/")
source("~/Desktop/School/causality_analysis/src/data_preprocessing/elec_price/[3]mean_stl_train_validation_withoutEXvar.R", echo=TRUE)
source("~/Desktop/School/causality_analysis/src/data_preprocessing/elec_price/[3]mean_stl_test_withoutEXvar.R", echo=TRUE)
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt')\
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt')
View(file1)
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt', sep = " ")
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt', sep = " ", header=None)
file1 = read.csv('/Users/orshahar/Desktop/School/causality_analysis/data/elec_price/moving_window/priceMT_12_24_train.txt', sep = " ", header=False)
